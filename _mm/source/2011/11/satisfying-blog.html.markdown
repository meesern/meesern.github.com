--- 
title: "The World's Most Satisfying Blogging Platform"
date: 05/11/2011
tags: software, other
---

I Only Wanted a Simple Blog
---------------------------

I suppose that it is quite typical.  I set out to start a simple blog to write about the many interesting things that I get involved with.  Simple - go to [wordpress.com](http://wordpress.com) and voil√†!  A Blog! Great, but I was going to be putting quite a number of code excerpts into the posts and wanted to be sure that syntax highlighting in multiple languages would work.  It's easy with a wordpress plugin but less so on wordpress.com as it does not support custom css/html in the template.  According to [this great guide](http://heisencoder.net/2009/01/adding-syntax-highlighting-to-blogger.html) to syntax highlighting in blogger [Blogger](http://www.blogger.com) does support editing the template HTML and so I created a blog there as well to compare the two. 

Both of these blogs used [SyntaxHighlighter](http://code.google.com/p/syntaxhighlighter/) - a javascript which highlights the code on the viewers browser.  It's a neat idea that works when you can't do anything smart on the server (such as with wordpress.com or Blogger).

So I set out writing a blog post about building [openQwaq](http://code.google.com/p/openqwaq/) - a second-life like immersive collaboration environment.  I have to say it was not very satisfying.  I had to edit in rich text or html with frequent changes between code excerpts and text and both caused problems - line endings either in the edited code or the rendered HTML had a horrible habit of changing - merging whole blocks of text together.  And having to edit in HTML in order to put the `<pre>` and `<code>` blocks in manually made me feel like my fingers were tied with rubber bands.  I realized that I had just expected [textile](http://www.textism.com/tools/textile/) or [markdown](http://daringfireball.net/projects/markdown/syntax) support and it wasn't there.  Perhaps I could send in posts by email instead.  Both Blogger and Wordpress supported this but both used HTML formatted email.  I looked around again and [Tublr](http://www.tumblr.com) seemed good.  I could send markdown formatted emails so I put my blog post into tumbler too.  But the tumblr post editor was a bit pokey and the whole thing had that Microsoft Word feeling about it, like owning a dog that you don't like.

While looking for syntax highlighting for Tumblr I found [google-code-prettify](http://code.google.com/p/google-code-prettify/) which looked like a slightly more elegant version of SyntaxHighlighter although the Ruby support seemed a little half hearted.  More importantly I found Ethan Schoonover's [Solarized](http://ethanschoonover.com/solarized) project.  There is such detailed attention in his development of the Solarized colour pallet for terminal and GUI applications that I really wanted to use it in my blog.  Highlighted text using these colours seems somehow free from a tension that is usually there below the surface.  While I was there I noticed that Ethan's site was generated by as Haskell based static site generator called [Hakyll](http://jaspervdj.be/hakyll/).

The Magic of Static Sites
--------------------------

I was struck by the simplicity and elegance of static site creation.  There's a lightness to pre-parsing pages and holding only HTML and Javascript on the server.  Everybody who looks at a blog page sees essentially the same thing so why construct the page at each request?  It is good to be free of an ugly crunchy old database.  Having looked at a number of static blogs however there was one conspicuous absence: comments.  A blog without the ability for readers to comment is like whistling into the wind.  It feels isolated from the community.  Clearly commenting on a blog post can not easily be managed if the web server it simply dishing out HTML but there was a reasonable solution in the form of [Diqus](http://disqus.com/) which manages comments by installing a javascript on the page.  It's a nice and well polished system and while it's free for a certain limit of page views I can confidently say that I'm not going to join the entry level and pay Disqus $300 per month for the privilege.  I've often had to live on less than that.  It does mean that I might need to migrate comments to some other system in the future but I checked and Diqus does at least have an export to XML option and that's enough reassurance to allow me to start.  Besides, [HTML5 Boilerplate](http://h5bp.com) use it.

Disqus uses comment spam protection from the well known [Akismet](http://akismet.com/).  Again they are free for personal use but they have quite a nice voluntary contribution system when you sign up.  If you want to use Akismet without paying you have to move a slider to $0 and endure the smiley face looking sad.  It's a shame in a way.  I'd like to see them celebrating giving their good gift of spam protection to personal blogs while making a healthy income from additional features and higher usage.  The slider says "how much is Akismet worth to you?" making the almost universal mismapping of money to value.  There's a lot still to be written about a more appropriate mapping of money to gratitude.

In any case, with all of that, I was sold on the idea of a static site.  There was one question - where would I host it?  I could use [The Butterflytent's](http://thebutterflytent.com) Amazon EC2 instance, but I like to keep that pure and not muddled with other sites.  It would be reasonable to use [Lightmind's](http://www.lightmind.co.uk) drupal server hosted by [E-Noise](http://www.e-noise.com/) who I have been very happy with.  The only caveat that I could see was that E-Noise very sensibly lock FTP access to prevent hacking attempts on their client's sites.  FTP has to be unlocked for a time period or specific IP address and this can be done from the web control panel.  It would mean that I would have to log into the control panel before posting to my blog, which while possible would be a little clumsy.

Much as I was tempted by the idea of playing with Haskell (there is a nice introduction here <http://tryhaskell.org/>) and liked the look of Hakyll it seemed slightly too simple and I thought that Ruby could offer some more of its loveliness.  There I found [Jekll](https://github.com/mojombo/jekyll/wiki/Usage) after which, on reflection, hekll is clearly named.  Jekll looked great.  It's based on ruby and liquid markup, it handles the notion of a blog well, is nice and simple and uses a comprehensive python based syntax highlighter called [Pygments](http://pygments.org/).  This discovery lead me to an ever better one:  [Github Pages](http://pages.github.com/).  Github pages allows you to host a static website from a repository in your github account.  This means that you can run the website as a git repository and all you have to do to publish is commit and push back to the master branch.  This magically solved the problem of unlocking FTP and meant that I could write my blog from anywhere (I had intended to achieve this through [Dropbox](http://www.dropbox.com), but this is much neater.  Github pages is a also a joy to set up.  Just create a repository based on your user name followed by "github.com".  In my case that was `meesern.github.com`.  Once you commit and index.html to the repository github gets to work and publishes the site (in my case at <http://meesern.github.com>).  To use your own domain name you simply commit a file with the name of the domain you want to use (in my case blog.lightmind.co.uk) and set your DNS to point to github (either with a CNAME to meesern.github.com, or an A-RECORD to the github IP address).  The whole solution just seems very very nice.

It didn't end there though.  I got distracted by [Middleman](http://middlemanapp.com/guides/templates-layouts-partials) which allowed me to write pages in erb, haml, slim, or Markdown.  Perfect:  Erb for ruby like templates, haml or slim for HTML like static pages and markdown for blog posts.  Middleman also runs on [Sinatra](http://www.sinatrarb.com/) and Rack which means that in addition to running as a static site generator it can expand simply to run as a server on a Rack host such as [Heroku](http://heroku.com).  This means that both as a static site generator and dynamic site server I have access to a host of [Rack middleware](http://coderack.org/) for things like syntax highlighting, html validation, usage data collection etc.  Middleman is the way I went.  It has, I think, a steeper learning curve than Jekll and perhaps looses something of the simplicity of the concept, but behaves very well.

Middleman builds a site from a source directory into a build directory.  Because Github pages uses jekll to process its sites it ignores directories that start with an underscore.  This allows me to hide my Middleman source in a directory called `_mm`.  From there I just need to link the build directory to the top level directory.  I've included some hints to other bits of setup.  They're not a complete recipe but just a springboard (you can check what's in the [Gemfile](https://github.com/meesern/meesern.github.com/blob/master/_mm/Gemfile) in the github respo for example).

    :::bash
    cd _mm
    ln -s .. build
    vi Gemfile
    bundle install
    middleman init . --template=blog --js-dir=js --images-dir=img --css-dir=css
    

Now I can update my blog with two commands:

    :::bash
    middleman build
    git commit -a

And upload the result with one:

    :::bash
    git push

If I am playing with the style I can run:

    :::bash
    middleman server --livereload

Then I have the page automatically update (`http://localhost:4567`) in the browser on which livereload is installed.  That way I see the effect the moment I save a source file such as a template or css.


Of course the setup process shared the same problem that all simplifying and helpful components share - when they don't work you are stuck.  In this case MiddleMan's documentation showed a stylesheet with `@import "susy"` which would give me a great layout.  I pasted it in as a placeholder for when I came to think about layout but it choked sass.  It turned out it needed me to include the `compass-susy-plugin` gem in the `Gemfile` and install the supporting stylesheets with:

    :::bash
    cd source
    compass create . -r susy -u susy

To get syntax highlighting to work I first had to fix the markdown.  According to the Daring Fireball site any text indented by at least four spaces would be formated in `<pre><code>...</code></pre>` blocks and that would work nicely for pygement to pick up and process. When I tried it however my indented text was only surrounded by a `<pre>...</pre>` block. [Maruku](http://maruku.rubyforge.org/) is the gem that provides markdown parsing.   Maruku provides a lot of extensions to the Daring Fireball markdown definition.  This is good, but I know from attempting to use it as the basis of the markup for [The Butterflytent](http://thebutterflytent.com) that it can also cause problems.  Markdown within html blocks for example can get very confusing (more for the parser that for the text's author).  In fact this tension between the utility of mixing representations such as markdown, textile and HTML, and consequent exponential complexity of attempting to parse it, that fist put me on the track of thinking about computer systems that used less brittle rule systems based on the primacy of 'likeness' over the sedimented and flawed Aristotelean concept of identity.

The first problem in this case is that Maruku's documentation for authors leaves a lot to be desired.  A really good Maruku cheat sheet is needed - I guess I'll have to write on.  In the meantime digging through I found Maruku _claims_ to wrap code blocks in pre and code [here](http://maruku.rubyforge.org/markdown_syntax.html).  Some testing with command line `maruku` showed that it did indeed produce the expected `<pre><code>...</code></pre>` wrapping and so I began to suspect the syntax highlighter.  Sure enough if I removed the code highlighter from the Rack Stack I got the `code` block in the output and so the highlighter was intercepting and transforming the block OK but without doing the actual job of highlighting.  Time to dig into SyntaxHighlighter and Rack middleware.  Phew!  After resurfacing it turned out that I only had failed to specify the language to parse (by starting the code block with :::bash in this case.  While looking around I did spot [Coderay](http://coderay.rubychan.de/) which is a nice looking ruby syntax highlighter.  It has fewer languages than python's Pygment at the moment and I like that I could write highlighted code excepts in [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) if I wanted.  In fact I will (I expect for the first and last time)...

    :::brainfuck
    +++++ +++++             initialize counter (cell #0) to 10
    [                       use loop to set the next four cells to 70/100/30/10
        > +++++ ++              add  7 to cell #1
        > +++++ +++++           add 10 to cell #2 
        > +++                   add  3 to cell #3
        > +                     add  1 to cell #4
        <<<< -                  decrement counter (cell #0)
    ]                   
    > ++ .                  print 'H'
    > + .                   print 'e'
    +++++ ++ .              print 'l'
    .                       print 'l'
    +++ .                   print 'o'
    > ++ .                  print ' '
    << +++++ +++++ +++++ .  print 'W'
    > .                     print 'o'
    +++ .                   print 'r'
    ----- - .               print 'l'
    ----- --- .             print 'd'
    > + .                   print '!'
    > .                     print '\n'
    
And here is what I like: I didn't burden your browser by making it download parsers for a bunch of obscure languages.  I didn't even load the server when you requested the page you just got a bunch of safe clean quick HTML.  Not that your browser would mind.  It's hardly a burden but I like that parsing happened just once when I built the site.  And I like that all I needed to do to include the excerpt was type it indented and name the language.

So far so good - I have the highlighting markup but where are the colours?  There seems to be remarkably little discussion in any of the documentation but eventually I found here <https://github.com/wbzyl/rack-codehighlighter> that I need to download a stylesheet from here <https://github.com/wbzyl/rack-codehighlighter/tree/master/examples/public/stylesheets>.  Because I was going to change the scheme I included the file in my own [sass](http://sass-lang.com/).  If you are not using sass it is well worth looking into.  In a nutshell it adds variables and support functions to css.  This might sound like a nicety but it goes a long way in helping you remove presentational classes from your HTML and keeping the semantic/presentational separation in good health.

Layout
-------

Next comes the layout.  Elastic vertical grid layout is the gold standard of web design and notoriously difficult to manage across a range of hideous browser issues. [Susy](http://susy.oddbird.net/tutorial/) which is included with Middleman makes the whole problem simple (once I'd figured out what it was all about)!  This blog is based on a twelve column grid of 5em each with 1em gutters and 1em side margins.  


Type
------

Middleman also supports [compass](http://compass-style.org/)- a bunch of css macros built on the power of Sass that tidy up various ugly css jobs such as defining gradients in a cross browser friendly way.  On lovely aspect of compass is support for vertical rhythm - helping to align font sizes, line-heights and margins so that the text on the page follows regular proportions.  It's an important part of having the page look good.  Sadly one less than lovely aspect of compass is its documentation.  It is like a sales pitch and similarly lacking in any genuine well thought out detail.  It is a lot like libraries that I am sure you have come across that forget to tell you what file to include, so you know that it would be great if you could use it but without that information it is useless.  Sadly Compass completely failed to respond in a useful way when I tried to use it in Middleman.  `@import "compass/typography/vertical_rhythm"` the documentation said, then completely failed to import `compass/typography/vertical_rhythm`.  Not surprising as there was no such file and I spent hours reading the documentation and trying to persuade compass to create one. In the end I cloned the compass repository and copied the frameworks manually into my css directory.  Sadly once I'd done that the documentation did not reveal much about how the functions were to be used.   By this time I was pretty much aware that it would have been easier to stick to Wordpress and satisfaction points were way down.  They sank further when I realized that middleman was not processing any subdirectory within the css directory and I had to flatten out the compass directory hierarchy.  The names were not even unique!  Bad Times.

Bugs
-----

Next was the simple problem of adding tags to the blog.  Nicely supported by Middleman there was seemingly little to do but add the tags to the YAML header at the top of the post and paste in a little code to list the tags in the side bar.  Only problem was that once I did that every page load crashed middleman.  Lots of documentation checking turned up nothing and convinced me that there was a bug, and searching in he code in the gem showed that somehow the gem was missing some context for the label `blog_taglink` which should have been `app.blog_taglink` in feature.rb.  Only problem was that fixing in moved the code on to another problem - one that stayed even when I rewound the changes.  :-(  More bad times.

I finally discovered that the crash was due to experimenting with a new middleman build in my source directory.  I had innocently created a scratch directory called 'zzz' and done a `middleman init . --template=blog` wanting to check for additional tag content in the config.rb that I might have lost.  Middleman was trying to parse the whole thing and somehow getting confused enough to spin of and crash attempting to format a date!


Polish
------

Now I'm ready for some styling.


